name: Publish to NPM

on:
  # Trigger after CI workflow completes on main branch
  workflow_run:
    workflows: ['CI']
    branches: [main, prod]
    types:
      - completed
  # Manual trigger for emergency releases
  workflow_dispatch:
    inputs:
      npm-tag:
        description: 'NPM tag (latest, dev, beta)'
        required: true
        default: 'dev'
        type: choice
        options:
          - latest
          - dev
          - beta

jobs:
  check-version:
    # Only run if CI passed (or manual trigger)
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check.outputs.should-publish }}
      version: ${{ steps.version.outputs.version }}
      npm-tag: ${{ steps.version.outputs.npm-tag }}
    steps:
      - name: Debug workflow context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "Workflow run head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Workflow run head sha: ${{ github.event.workflow_run.head_sha }}"
          echo "Will checkout: ${{ github.event.workflow_run.head_branch || github.ref }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For workflow_run events, checkout the branch that triggered the CI
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}
          fetch-depth: 2 # Need previous commit to compare

      - name: Verify checkout
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Current commit: $(git rev-parse HEAD)"
          echo "Package.json version: $(node -p "require('./package.json').version")"

      - name: Get version from package.json
        id: version
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")

          # Clean version (remove any existing suffixes)
          CLEAN_VERSION=${BASE_VERSION%%-*}

          # Handle manual trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION=$CLEAN_VERSION
            echo "npm-tag=${{ github.event.inputs.npm-tag }}" >> $GITHUB_OUTPUT
          # Automatic trigger from CI workflow
          else
            # Get the branch that triggered the CI workflow
            TRIGGER_BRANCH="${{ github.event.workflow_run.head_branch }}"
            echo "CI was triggered from branch: $TRIGGER_BRANCH"
            
            if [[ "$TRIGGER_BRANCH" == "main" ]]; then
              # main branch - add -dev suffix, publish as dev
              VERSION="${CLEAN_VERSION}-dev"
              echo "npm-tag=dev" >> $GITHUB_OUTPUT
            elif [[ "$TRIGGER_BRANCH" == "prod" ]]; then
              # prod branch - use clean version, publish as stable
              VERSION=$CLEAN_VERSION
              echo "npm-tag=latest" >> $GITHUB_OUTPUT
            else
              echo "Unknown branch: $TRIGGER_BRANCH"
              exit 1
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Will publish version: $VERSION"

      - name: Check if version changed or manual trigger
        id: check
        run: |
          # Always publish on manual trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          # Check if this is the first commit or if package.json version changed
          elif [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "First commit, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          else
            # Check if package.json exists in previous commit
            if git show HEAD~1:package.json > /dev/null 2>&1; then
              # Compare versions
              PREV_VERSION=$(git show HEAD~1:package.json | grep '"version"' | cut -d'"' -f4)
              CURR_VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
              
              if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
                echo "Version changed from $PREV_VERSION to $CURR_VERSION, will publish"
                echo "should-publish=true" >> $GITHUB_OUTPUT
              else
                echo "Version unchanged ($CURR_VERSION), skipping publish"
                echo "should-publish=false" >> $GITHUB_OUTPUT
              fi
            else
              # package.json didn't exist before, so this is new
              echo "package.json is new, will publish"
              echo "should-publish=true" >> $GITHUB_OUTPUT
            fi
          fi

  publish:
    needs: check-version
    if: needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # For creating tags
      id-token: write # For NPM provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For workflow_run events, checkout the branch that triggered the CI
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build library
        run: |
          # Build the library package using prepack script
          # This includes svelte-package, CLI build, and publint validation
          pnpm run prepack

      - name: Update version for dev/beta releases
        if: needs.check-version.outputs.npm-tag != 'latest'
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          # Update package.json with the suffixed version for dev/beta releases
          npm version $VERSION --no-git-tag-version --allow-same-version

      - name: Check if version exists on NPM
        id: npm-check
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          # Check if this exact version already exists
          if npm view @shelchin/svelte-i18n@$VERSION version 2>/dev/null; then
            echo "‚ùå Version $VERSION already exists on NPM"
            echo "Version already exists, skipping publish"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Version $VERSION is new, proceeding with publish"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.npm-check.outputs.exists != 'true'
        run: |
          npm publish --tag ${{ needs.check-version.outputs.npm-tag }} --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git Tag (latest releases only)
        if: needs.check-version.outputs.npm-tag == 'latest' && steps.npm-check.outputs.exists != 'true'
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push tag
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release (latest releases only)
        if: needs.check-version.outputs.npm-tag == 'latest' && steps.npm-check.outputs.exists != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release ${{ needs.check-version.outputs.version }}
          body: |
            ## üéâ Official Release: @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}

            ### Installation
            ```bash
            npm install @shelchin/svelte-i18n@latest
            # or
            npm install @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}
            ```

            ### NPM Package
            https://www.npmjs.com/package/@shelchin/svelte-i18n/v/${{ needs.check-version.outputs.version }}

            ---
            **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false

  notify:
    needs: [check-version, publish]
    if: always() && needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          echo "‚úÖ Successfully published @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}"
          echo "üì¶ NPM Tag: ${{ needs.check-version.outputs.npm-tag }}"
          echo "üè∑Ô∏è Git Tag: v${{ needs.check-version.outputs.version }}"
          echo "üå≥ Branch: ${{ github.ref_name }}"
          echo "üîÑ Triggered by: ${{ github.event_name }}"

      - name: Notify failure
        if: needs.publish.result == 'failure'
        run: |
          echo "‚ùå Failed to publish @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}"
          exit 1

      - name: Notify skipped due to CI failure
        if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != 'success'
        run: |
          echo "‚è≠Ô∏è Skipped NPM publish because CI failed"
          echo "‚ùå CI conclusion: ${{ github.event.workflow_run.conclusion }}"
          exit 1
