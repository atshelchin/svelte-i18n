name: Auto Publish to NPM

on:
  push:
    branches:
      - main # Publishes dev versions
      - prod # Publishes stable versions
    paths:
      - 'package.json' # Only trigger when package.json changes
      - 'src/**'
      - '!**.md' # Ignore markdown files

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.check.outputs.should-publish }}
      version: ${{ steps.version.outputs.version }}
      npm-tag: ${{ steps.version.outputs.npm-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit to compare

      - name: Get version from package.json
        id: version
        run: |
          BASE_VERSION=$(node -p "require('./package.json').version")

          # Clean version (remove any existing suffixes)
          CLEAN_VERSION=${BASE_VERSION%%-*}

          # Determine final version and NPM tag based on branch
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            # prod branch - use clean version, publish as stable
            VERSION=$CLEAN_VERSION
            echo "npm-tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # main branch - add -dev suffix, publish as dev
            VERSION="${CLEAN_VERSION}-dev"
            echo "npm-tag=dev" >> $GITHUB_OUTPUT
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Will publish version: $VERSION"

      - name: Check if version changed
        id: check
        run: |
          # Check if this is the first commit or if package.json version changed
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "First commit, will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          else
            # Check if package.json exists in previous commit
            if git show HEAD~1:package.json > /dev/null 2>&1; then
              # Compare versions
              PREV_VERSION=$(git show HEAD~1:package.json | grep '"version"' | cut -d'"' -f4)
              CURR_VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
              
              if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
                echo "Version changed from $PREV_VERSION to $CURR_VERSION, will publish"
                echo "should-publish=true" >> $GITHUB_OUTPUT
              else
                echo "Version unchanged ($CURR_VERSION), skipping publish"
                echo "should-publish=false" >> $GITHUB_OUTPUT
              fi
            else
              # package.json didn't exist before, so this is new
              echo "package.json is new, will publish"
              echo "should-publish=true" >> $GITHUB_OUTPUT
            fi
          fi

  test:
    needs: check-version
    if: needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(cat package.json | grep \"playwright\" | head -1 | awk -F':' '{print $2}' | sed 's/[", ]//g')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps chromium

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: pnpm exec playwright install-deps chromium

      - name: Run linter
        run: pnpm run lint

      - name: Run type check
        run: pnpm run check

      - name: Run tests
        run: pnpm run test:unit -- --run

  publish:
    needs: [check-version, test]
    if: needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # For creating tags
      id-token: write # For NPM provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build library
        run: |
          # Build the library package using prepack script
          # This includes svelte-package, CLI build, and publint validation
          pnpm run prepack

      - name: Check if version exists on NPM
        id: npm-check
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          # Check if this exact version already exists
          if npm view @shelchin/svelte-i18n@$VERSION version 2>/dev/null; then
            echo "‚ùå Version $VERSION already exists on NPM"
            exit 1
          fi
          echo "‚úÖ Version $VERSION is new, proceeding with publish"

      - name: Publish to NPM
        run: |
          npm publish --tag ${{ needs.check-version.outputs.npm-tag }} --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git Tag (prod branch only)
        if: github.ref == 'refs/heads/prod'
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push tag
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release (prod branch only)
        if: github.ref == 'refs/heads/prod'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release ${{ needs.check-version.outputs.version }}
          body: |
            ## üéâ Official Release: @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}

            ### Installation
            ```bash
            npm install @shelchin/svelte-i18n@latest
            # or
            npm install @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}
            ```

            ### NPM Package
            https://www.npmjs.com/package/@shelchin/svelte-i18n/v/${{ needs.check-version.outputs.version }}

            ---
            **Commit:** ${{ github.sha }}
          draft: false
          prerelease: false

  notify:
    needs: [check-version, publish]
    if: always() && needs.check-version.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          echo "‚úÖ Successfully published @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}"
          echo "üì¶ NPM Tag: ${{ needs.check-version.outputs.npm-tag }}"
          echo "üè∑Ô∏è Git Tag: v${{ needs.check-version.outputs.version }}"
          echo "üå≥ Branch: ${{ github.ref_name }}"

      - name: Notify failure
        if: needs.publish.result == 'failure'
        run: |
          echo "‚ùå Failed to publish @shelchin/svelte-i18n@${{ needs.check-version.outputs.version }}"
          exit 1
