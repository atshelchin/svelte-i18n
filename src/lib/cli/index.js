#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
// import { fileURLToPath } from 'url';

// ANSI color codes for terminal output
const colors = {
	reset: '\x1b[0m',
	bright: '\x1b[1m',
	green: '\x1b[32m',
	blue: '\x1b[34m',
	yellow: '\x1b[33m',
	red: '\x1b[31m'
};

function log(message, color = 'reset') {
	console.log(`${colors[color]}${message}${colors.reset}`);
}

function success(message) {
	console.log(`${colors.green}✅ ${message}${colors.reset}`);
}

function error(message) {
	console.error(`${colors.red}❌ ${message}${colors.reset}`);
}

function info(message) {
	console.log(`${colors.blue}ℹ️  ${message}${colors.reset}`);
}

// Parse command line arguments
const command = process.argv[2];

if (!command || command === 'help' || command === '--help' || command === '-h') {
	log('╔════════════════════════════════════════════════════════════════╗', 'bright');
	log('║           @shelchin/svelte-i18n CLI Tool                      ║', 'bright');
	log('╚════════════════════════════════════════════════════════════════╝', 'bright');
	console.log();
	log('Usage:', 'yellow');
	console.log('  npx @shelchin/svelte-i18n init    Initialize i18n in your project');
	console.log('  npx @shelchin/svelte-i18n help    Show this help message');
	console.log();
	log('Commands:', 'yellow');
	console.log('  init    Set up i18n configuration and create necessary files');
	console.log('          - Creates src/translations/i18n.ts');
	console.log('          - Creates src/translations/locales/ directory');
	console.log('          - Creates sample translation files');
	console.log('          - Updates package.json with scripts');
	console.log();
	process.exit(0);
}

if (command === 'init') {
	log('🚀 Initializing @shelchin/svelte-i18n...', 'bright');
	console.log();

	const projectRoot = process.cwd();

	// Check if package.json exists
	const packageJsonPath = path.join(projectRoot, 'package.json');
	if (!fs.existsSync(packageJsonPath)) {
		error('No package.json found. Please run this command in your project root.');
		process.exit(1);
	}

	// Step 1: Create directories
	info('Creating directory structure...');
	const translationsDir = path.join(projectRoot, 'src/translations');
	const localesDir = path.join(translationsDir, 'locales');
	const typesDir = path.join(projectRoot, 'src/types');

	fs.mkdirSync(localesDir, { recursive: true });
	fs.mkdirSync(typesDir, { recursive: true });
	success('Created src/translations/locales/');

	// Step 2: Create sample translation files if they don't exist
	info('Creating sample translation files...');

	const enTranslations = {
		welcome: 'Welcome',
		hello: 'Hello {name}!',
		navigation: {
			home: 'Home',
			about: 'About',
			contact: 'Contact'
		}
	};

	const zhTranslations = {
		welcome: '欢迎',
		hello: '你好 {name}！',
		navigation: {
			home: '首页',
			about: '关于',
			contact: '联系'
		}
	};

	const enPath = path.join(localesDir, 'en.json');
	const zhPath = path.join(localesDir, 'zh.json');

	if (!fs.existsSync(enPath)) {
		fs.writeFileSync(enPath, JSON.stringify(enTranslations, null, 2));
		success('Created src/translations/locales/en.json');
	} else {
		info('src/translations/locales/en.json already exists, skipping...');
	}

	if (!fs.existsSync(zhPath)) {
		fs.writeFileSync(zhPath, JSON.stringify(zhTranslations, null, 2));
		success('Created src/translations/locales/zh.json');
	} else {
		info('src/translations/locales/zh.json already exists, skipping...');
	}

	// Step 3: Create i18n.ts configuration file
	info('Creating i18n configuration...');

	const i18nContent = `/**
 * Application i18n configuration
 * Auto-generated by @shelchin/svelte-i18n CLI
 * 
 * This file handles translation imports and i18n setup
 * Using unified API with type safety for translation keys
 */

import { createTypedUnifiedI18n, type UnifiedI18nConfig,TranslationSchema } from '@shelchin/svelte-i18n';
import type { I18nPath } from '../types/app-i18n-generated';

// ============================================
// Auto-scan and import translations from locales directory
// ============================================

const translationModules = import.meta.glob('./locales/*.json', {
	eager: true,
	import: 'default'
});

const translations: Record<string, TranslationSchema> = {};

// Extract language code from file path and build translations object
for (const [path, module] of Object.entries(translationModules)) {
	// Extract language code from path like './locales/en.json'
	// Use string methods instead of regex to avoid escape issues
	const parts = path.split('/');
	const filename = parts[parts.length - 1];
	const match = filename && filename.endsWith('.json') ? [null, filename.slice(0, -5)] : null;
	if (match && match[1]) {
		const langCode = match[1];
		translations[langCode] = module;
	}
}

// ============================================
// Configure and initialize i18n
// ============================================

const config: UnifiedI18nConfig = {
	namespace: 'app',
	isMain: true, // This is the main app instance
	defaultLocale: 'en',
	fallbackLocale: 'en',
	translations,
	interpolation: {
		prefix: '{',
		suffix: '}'
	},
	formats: {
		date: { year: 'numeric' as const, month: 'long' as const, day: 'numeric' as const },
		time: { hour: '2-digit' as const, minute: '2-digit' as const },
		number: { minimumFractionDigits: 0, maximumFractionDigits: 2 },
		currency: { style: 'currency' as const, currency: 'USD' }
	}
};

// Create main app i18n instance with type safety
export const i18n = createTypedUnifiedI18n<I18nPath>(config);

// ============================================
// Export for use in application
// ============================================

// Export getI18n function for typed access
export function getI18n() {
	return i18n;
}

export default i18n;
`;

	const i18nPath = path.join(translationsDir, 'i18n.ts');
	fs.writeFileSync(i18nPath, i18nContent);
	success('Created src/translations/i18n.ts');

	// Step 4: Create type definition stub
	info('Creating type definition file...');

	const typeContent = `/**
 * Auto-generated i18n type definitions
 * This file will be automatically updated when you run type generation
 */

// Type for all translation keys in your application
export type I18nPath = 
	| 'welcome'
	| 'hello'
	| 'navigation.home'
	| 'navigation.about'
	| 'navigation.contact';

// You can regenerate this file using your build tools
// or the type generation script provided by @shelchin/svelte-i18n
`;

	const typePath = path.join(typesDir, 'app-i18n-generated.d.ts');
	if (!fs.existsSync(typePath)) {
		fs.writeFileSync(typePath, typeContent);
		success('Created src/types/app-i18n-generated.d.ts');
	} else {
		info('Type definitions already exist, skipping...');
	}

	// Step 5: Update package.json with useful scripts
	info('Updating package.json scripts...');

	const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

	if (!packageJson.scripts) {
		packageJson.scripts = {};
	}

	// Add helpful i18n scripts if they don't exist
	const scriptsToAdd = {
		'i18n:check': 'echo "TODO: Add translation validation script"',
		'i18n:extract': 'echo "TODO: Add translation key extraction script"'
	};

	let scriptsAdded = false;
	for (const [key, value] of Object.entries(scriptsToAdd)) {
		if (!packageJson.scripts[key]) {
			packageJson.scripts[key] = value;
			scriptsAdded = true;
		}
	}

	if (scriptsAdded) {
		fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
		success('Added i18n scripts to package.json');
	}

	// Step 6: Instructions for the user
	console.log();
	log('═══════════════════════════════════════════════════════════════', 'green');
	success('@shelchin/svelte-i18n initialized successfully!');
	log('═══════════════════════════════════════════════════════════════', 'green');
	console.log();

	log('Next steps:', 'yellow');
	console.log('1. Import i18n in your root layout (+layout.svelte):');
	console.log(`   ${colors.blue}import '../translations/i18n';${colors.reset}`);
	console.log();
	console.log('2. Use translations in your components:');
	console.log(`   ${colors.blue}import { i18n } from '../translations/i18n';${colors.reset}`);
	console.log(
		`   ${colors.blue}const greeting = i18n.t('hello', { name: 'World' });${colors.reset}`
	);
	console.log();
	console.log('3. Add more languages by creating JSON files in:');
	console.log(`   ${colors.blue}src/translations/locales/${colors.reset}`);
	console.log();
	console.log('4. Switch languages programmatically:');
	console.log(`   ${colors.blue}i18n.locale.set('zh');${colors.reset}`);
	console.log();

	log('📚 Documentation:', 'yellow');
	console.log('   https://github.com/atshelchin/svelte-i18n');
	console.log();
} else {
	error(`Unknown command: ${command}`);
	console.log('Run "npx @shelchin/svelte-i18n help" for usage information');
	process.exit(1);
}
