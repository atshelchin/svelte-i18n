/**
 * Library i18n configuration
 * Auto-generated by @shelchin/svelte-i18n CLI
 *
 * This file handles translation imports and i18n setup
 * Using unified API with type safety for translation keys
 */

import {
	createTypedUnifiedI18n,
	initTypedI18n,
	getI18nInstance,
	type UnifiedI18nConfig
} from '$lib/unified.js';
import type { I18nInstance, TranslationSchema } from '$lib/core/types.js';
import type { LibI18nPath } from '$lib/types/lib-i18n-generated.js';

// ============================================
// Auto-scan and import translations from locales directory
// ============================================

const translationModules = import.meta.glob('./locales/*.json', {
	eager: true,
	import: 'default'
});

const translations: Record<string, TranslationSchema> = {};

// Extract language code from file path and build translations object
for (const [path, module] of Object.entries(translationModules)) {
	// Extract language code from path like './locales/en.json'
	const match = path.match(/\/([^/]+)\.json$/);
	if (match && match[1]) {
		const langCode = match[1];
		translations[langCode] = module as TranslationSchema;
	}
}

// Get package name
const packageName = '@shelchin/svelte-i18n';

// ============================================
// Configure and initialize i18n
// ============================================

const config: UnifiedI18nConfig = {
	namespace: '@shelchin/svelte-i18n',
	defaultLocale: 'en',
	fallbackLocale: 'en',
	translations,
	interpolation: {
		prefix: '{',
		suffix: '}'
	},
	formats: {
		date: { year: 'numeric' as const, month: 'short' as const, day: 'numeric' as const },
		time: { hour: '2-digit' as const, minute: '2-digit' as const },
		number: { minimumFractionDigits: 0, maximumFractionDigits: 2 },
		currency: { style: 'currency' as const, currency: 'USD' }
	}
};

// Create library i18n instance with type safety
export const libI18n = createTypedUnifiedI18n<LibI18nPath>(config);

// Auto-initialize the library i18n when in browser
if (typeof window !== 'undefined') {
	// Initialize asynchronously
	initTypedI18n(libI18n).catch((err) => {
		console.error('Failed to initialize library i18n:', err);
	});
}

// Helper to get the effective i18n instance
// Try to use app's package instance if available, otherwise use library's own
export function getEffectiveLibI18n(): I18nInstance {
	try {
		// Try to get the app's package instance
		return getI18nInstance(packageName);
	} catch {
		// Fallback to library's own instance
		return libI18n as I18nInstance;
	}
}

// For backward compatibility
export function getLibI18n() {
	return libI18n;
}
